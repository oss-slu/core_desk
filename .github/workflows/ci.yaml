name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install Dependencies
        working-directory: ./api
        run: yarn install

      - name: Run Integration Tests
        working-directory: ./api
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/sluop-test
          JWT_SECRET: TEST_JWT_SECRET
          BASE_URL: "http://localhost:5173"
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: nyc3
          AWS_BUCKET: open-project
          AWS_ENDPOINT: https://nyc3.digitaloceanspaces.com
          PROJECT_NAME: ci-environment
        run: yarn test --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  lint-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install backend Dependencies
        working-directory: ./api
        run: yarn install

      - name: Run backend lint
        working-directory: ./api
        run: yarn lint

  lint-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install frontend Dependencies
        working-directory: ./app
        run: yarn install

      - name: Run frontend lint
        working-directory: ./app
        run: yarn lint

  e2e:
    name: e2e
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      pull-requests: write
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install e2e dependencies
        working-directory: ./e2e
        run: npm ci --no-audit --no-fund

      - name: Generate Prisma client for e2e
        working-directory: ./e2e
        run: npm run prepare:prisma

      - name: Build e2e Docker images
        working-directory: ./e2e
        run: docker compose -f ./docker-compose.yml build

      - name: Start e2e stack (DB, MinIO, API)
        working-directory: ./e2e
        run: docker compose -f ./docker-compose.yml up -d db minio minio-init api

      - name: Wait for API health
        run: |
          echo "Waiting for API to become healthy..."
          for i in {1..60}; do
            if curl -sf http://localhost:3030/health >/dev/null; then
              echo "API is healthy"; exit 0;
            fi
            sleep 2
          done
          echo "API did not become healthy in time" >&2; exit 1

      - name: Run e2e Tests
        working-directory: ./e2e
        run: docker compose -f ./docker-compose.yml run --rm --entrypoint cypress cypress run --e2e

      - name: Teardown e2e stack
        if: always()
        working-directory: ./e2e
        run: docker compose -f ./docker-compose.yml down -v

      # Upload artifacts (give each an id so we can read their URLs)
      - name: Upload Cypress videos
        if: always()
        id: upload_videos
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: e2e/cypress/videos
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Cypress screenshots
        if: always()
        id: upload_screens
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: e2e/cypress/screenshots
          if-no-files-found: ignore
          retention-days: 7

      # Find existing comment (so we only ever have one)
      - name: Find existing PR comment
        if: always() && github.event_name == 'pull_request'
        id: find_comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "<!-- e2e-artifacts -->"

      # Create or update the single comment
      - name: Post / update PR comment with artifact links
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            <!-- e2e-artifacts -->
            **E2E Artifacts for run ${{ github.run_number }} (#${{ github.run_id }})**

            ${{ steps.upload_videos.outputs.artifact-url && format('- Videos: [{0}]({0})', steps.upload_videos.outputs.artifact-url) || '- Videos: *(none uploaded)*' }}
            ${{ steps.upload_screens.outputs.artifact-url && format('- Screenshots: [{0}]({0})', steps.upload_screens.outputs.artifact-url) || '- Screenshots: *(none uploaded)*' }}

            _Artifacts expire per repository retention settings (7 days)._

  docker:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint-api
      - lint-app
      - e2e
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare build metadata
        shell: bash
        run: |
          echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"
          echo "VITE_HASH=${GITHUB_SHA::7}" >> "$GITHUB_ENV"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: jackcranee/sluopenproject-oss:0.0.1
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            VITE_BUILD_DATE=${{ env.VITE_BUILD_DATE }}
            VITE_HASH=${{ env.VITE_HASH }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to DigitalOcean
        uses: digitalocean/app_action/deploy@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          app_name: slu-open-project
          print_build_logs: true
          print_deploy_logs: true

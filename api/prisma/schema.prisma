// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String

  logs  logs[]
  shops UserShop[]
  jobs  Job[]

  admin  Boolean @default(false)
  suspended Boolean @default(false)
  suspensionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model logs {
  id      String  @id @default(cuid())
  type    LogType
  message String?
  from String? @db.MediumText
  to String? @db.MediumText

  user   user?   @relation(fields: [userId], references: [id])
  userId String?

  shop   Shop?   @relation(fields: [shopId], references: [id])
  shopId String?

  job    Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  jobItem JobItem? @relation(fields: [jobItemId], references: [id])
  jobItemId String?

  resource Resource? @relation(fields: [resourceId], references: [id])
  resourceId String?

  resourceImage ResourceImage? @relation(fields: [resourceImageId], references: [id])
  resourceImageId String?

  printer3dType Printer3dType? @relation(fields: [printer3dTypeId], references: [id])
  printer3dTypeId String?

  printer3dMaterial Printer3dMaterial? @relation(fields: [printer3dMaterialId], references: [id])
  printer3dMaterialId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  USER_LOGIN
  USER_CREATED
  SHOP_CREATED
  USER_CONNECTED_TO_SHOP
  USER_DISCONNECTED_FROM_SHOP
  USER_SHOP_ROLE_CHANGED
  USER_PROMOTED_TO_ADMIN
  USER_DEMOTED_FROM_ADMIN
  USER_SUSPENSION_APPLIED
  USER_SUSPENSION_REMOVED
  USER_SUSPENSION_CHANGED
  JOB_CREATED
  JOB_MODIFIED
  JOB_DELETED
  JOB_STATUS_CHANGED
  JOB_ITEM_CREATED
  JOB_ITEM_DELETED
  JOB_ITEM_MODIFIED
  JOB_ITEM_STATUS_CHANGED
  RESOURCE_CREATED
  RESOURCE_MODIFIED
  RESOURCE_DELETED
  RESOURCE_IMAGE_CREATED
  RESOURCE_IMAGE_MODIFIED
  RESOURCE_IMAGE_DELETED
  PRINTER_3D_TYPE_CREATED
  PRINTER_3D_TYPE_MODIFIED
  PRINTER_3D_TYPE_DELETED
  PRINTER_3D_MATERIAL_CREATED
  PRINTER_3D_MATERIAL_MODIFIED
  PRINTER_3D_MATERIAL_DELETED
}

model UserShop {
  id     String @id @default(cuid())
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String

  accountType AccountType @default(CUSTOMER)
  accountTitle String?

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccountType {
  CUSTOMER
  OPERATOR
  ADMIN
  INSTRUCTOR
}

model Shop {
  id          String  @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  description String? @db.MediumText
  imageUrl    String?

  color Color?

  logs  logs[]
  users UserShop[]
  jobs  Job[]

  resources Resource[]

  printer3dTypes Printer3dType[]
  printer3dMaterials Printer3dMaterial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String  @id @default(cuid())
  title       String
  description String? @db.MediumText
  images      ResourceImage[]
  public      Boolean @default(false)

  primaryCategory String?
  secondaryCategory String?

  resourceType ResourceType?

  printer3dType Printer3dType? @relation(fields: [printer3dTypeId], references: [id])
  printer3dTypeId String?

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  quantity Int?
  quantityPublic Boolean @default(true)

  costPerUnit Float?
  fixedCost Float?
  costPerTime Float?
  costPerMaterial Float?
  costPerProcessingTime Float?
  costingPublic Boolean @default(true)

  userSuppliedMaterial SuppliedMaterialLevels @default(NEVER)

  logs  logs[]
}

model Printer3dType {
  id          String  @id @default(cuid())
  type       String
  description String? @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active Boolean @default(true)

  resources Resource[]
  materials Printer3dMaterial[]

  shopId String
  shop Shop @relation(fields: [shopId], references: [id])

  logs  logs[]
}

model Printer3dMaterial {
  id          String  @id @default(cuid())
  type       String
  description String? @db.MediumText
  manufacturer String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active Boolean @default(true)

  printer3dType Printer3dType @relation(fields: [printer3dTypeId], references: [id])
  printer3dTypeId String

  shopId String
  shop Shop @relation(fields: [shopId], references: [id])

  logs  logs[]
}

model ResourceImage {
  id          String  @id @default(cuid())

  fileKey String
  fileUrl String
  fileName String
  fileType String

  description String?

  active Boolean @default(true)

  resource Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs  logs[]
}

enum ResourceType {
  OTHER
  INSTRUMENT
  TOOL
  PRINTER
  PRINTER_3D
  LASER_CUTTER
  CNC

}

enum SuppliedMaterialLevels {
  ALWAYS
  SOMETIMES
  NEVER
  SPECIAL
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  TEAL
}

model Job {
  id          String  @id @default(cuid())
  title       String
  description String? @db.MediumText
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String

  user   user   @relation(fields: [userId], references: [id])
  userId String

  dueDate DateTime?

  logs  logs[]
  items JobItem[]

  status ProgressStatus @default(NOT_STARTED)
}

model JobItem {
  id          String  @id @default(cuid())
  title       String
  status     ProgressStatus @default(NOT_STARTED)

  fileKey String
  fileUrl String
  fileName String
  fileType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobId String
  job Job @relation(fields: [jobId], references: [id])
  logs logs[]
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  WONT_DO
  WAITING
}
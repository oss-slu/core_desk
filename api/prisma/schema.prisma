generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String             @id @default(cuid())
  email            String             @unique
  firstName        String
  lastName         String
  admin            Boolean            @default(false)
  suspended        Boolean            @default(false)
  suspensionReason String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  jobs             Job[]
  comments         JobComment[]
  jobItems         JobItem[]
  ledgerItems      LedgerItem[]
  billingGroups    UserBillingGroup[]
  shops            UserShop[]
  logs             logs[]
  navigation       Navigation[]
}

model logs {
  id                           String                      @id @default(cuid())
  type                         LogType
  message                      String?
  from                         String?
  to                           String?
  userId                       String?
  shopId                       String?
  jobId                        String?
  jobItemId                    String?
  resourceId                   String?
  resourceImageId              String?
  materialId                   String?
  materialImageId              String?
  resourceTypeId               String?
  commentId                    String?
  ledgerItemId                 String?
  billingGroupId               String?
  userBillingGroupId           String?
  billingGroupInvitationLinkId String?
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  billingGroup                 BillingGroup?               @relation(fields: [billingGroupId], references: [id], onDelete: Cascade)
  billingGroupInvitationLink   BillingGroupInvitationLink? @relation(fields: [billingGroupInvitationLinkId], references: [id], onDelete: Cascade)
  comment                      JobComment?                 @relation(fields: [commentId], references: [id], onDelete: Cascade)
  job                          Job?                        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobItem                      JobItem?                    @relation(fields: [jobItemId], references: [id], onDelete: Cascade)
  ledgerItem                   LedgerItem?                 @relation(fields: [ledgerItemId], references: [id], onDelete: Cascade)
  material                     Material?                   @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialImage                MaterialImage?              @relation(fields: [materialImageId], references: [id], onDelete: Cascade)
  resource                     Resource?                   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceImage                ResourceImage?              @relation(fields: [resourceImageId], references: [id], onDelete: Cascade)
  resourceType                 ResourceType?               @relation(fields: [resourceTypeId], references: [id], onDelete: Cascade)
  shop                         Shop?                       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  userBillingGroup             UserBillingGroup?           @relation(fields: [userBillingGroupId], references: [id], onDelete: Cascade)
  user                         user?                       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserShop {
  id           String      @id @default(cuid())
  userId       String
  shopId       String
  accountType  AccountType @default(CUSTOMER)
  accountTitle String?
  active       Boolean     @default(true)
  blacklisted  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  shop         Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user         user        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id              String         @id @default(cuid())
  name            String
  address         String?
  phone           String?
  email           String?
  website         String?
  description     String?
  imageUrl        String?
  logoUrl         String?
  logoKey         String?
  logoName        String?
  color           Color?
  startingDeposit Float?
  active          Boolean        @default(true)
  autoJoin        Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  billingGroups   BillingGroup[]
  jobs            Job[]
  ledgerItems     LedgerItem[]
  materials       Material[]
  resources       Resource[]
  resourceTypes   ResourceType[]
  users           UserShop[]
  logs            logs[]
  automatedLedgerItemType LedgerItemType?
  automatedLedgerItemValue Float?
}

model Resource {
  id                    String                   @id @default(cuid())
  title                 String
  description           String?
  public                Boolean                  @default(false)
  primaryCategory       String?
  secondaryCategory     String?
  resourceTypeId        String
  shopId                String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  active                Boolean                  @default(true)
  quantity              Int?
  quantityPublic        Boolean                  @default(true)
  costPerUnit           Float?
  fixedCost             Float?
  costPerTime           Float?
  materialLabel         String?
  costPerProcessingTime Float?
  costingPublic         Boolean                  @default(true)
  userSuppliedMaterial  SuppliedMaterialLevels   @default(NEVER)
  additionalCostItems   AdditionalCostLineItem[]
  jobs                  Job[]
  jobItems              JobItem[]
  resourceType          ResourceType             @relation(fields: [resourceTypeId], references: [id])
  shop                  Shop                     @relation(fields: [shopId], references: [id])
  images                ResourceImage[]
  logs                  logs[]
}

model Material {
  id                           String                   @id @default(cuid())
  title                        String
  description                  String?
  manufacturer                 String?
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
  active                       Boolean                  @default(true)
  shopId                       String
  costPerUnit                  Float?
  unitDescriptor               String?
  costPublic                   Boolean                  @default(true)
  resourceTypeId               String
  msdsFileKey                  String?
  msdsFileUrl                  String?
  msdsFileName                 String?
  msdsFileType                 String?
  tdsFileKey                   String?
  tdsFileUrl                   String?
  tdsFileName                  String?
  tdsFileType                  String?
  additionalCostItems          AdditionalCostLineItem[] @relation("AdditionalCostLineItem::primaryMaterial")
  additionalCostItemsSecondary AdditionalCostLineItem[] @relation("AdditionalCostLineItem::secondaryMaterial")
  jobs                         Job[]                    @relation("Job::primaryMaterial")
  jobsSecondary                Job[]                    @relation("Job::secondaryMaterial")
  jobItems                     JobItem[]                @relation("JobItem::primaryMaterial")
  jobItemsSecondary            JobItem[]                @relation("JobItem::secondaryMaterial")
  resourceType                 ResourceType             @relation(fields: [resourceTypeId], references: [id])
  shop                         Shop                     @relation(fields: [shopId], references: [id])
  images                       MaterialImage[]
  logs                         logs[]
}

model MaterialImage {
  id          String   @id @default(cuid())
  fileKey     String
  fileUrl     String
  fileName    String
  fileType    String
  description String?
  active      Boolean  @default(true)
  materialId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  material    Material @relation(fields: [materialId], references: [id])
  logs        logs[]
}

model ResourceImage {
  id          String   @id @default(cuid())
  fileKey     String
  fileUrl     String
  fileName    String
  fileType    String
  description String?
  active      Boolean  @default(true)
  resourceId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resource    Resource @relation(fields: [resourceId], references: [id])
  logs        logs[]
}

model ResourceType {
  id                  String                   @id @default(cuid())
  title               String
  description         String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  active              Boolean                  @default(true)
  shopId              String
  additionalCostItems AdditionalCostLineItem[]
  jobs                Job[]
  jobItems            JobItem[]
  materials           Material[]
  resources           Resource[]
  shop                Shop                     @relation(fields: [shopId], references: [id])
  logs                logs[]
}

model Job {
  id                     String                   @id @default(cuid())
  title                  String
  description            String?
  imageUrl               String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  shopId                 String
  userId                 String
  materialId             String?
  materialQty            Float?
  resourceTypeId         String?
  resourceId             String?
  groupId                String?
  dueDate                DateTime?
  finalized              Boolean                  @default(false)
  finalizedAt            DateTime?
  /// If true, the additional cost will be used _instead_ of the calculated cost. If false, it will be used in addition.
  additionalCostOverride Boolean                  @default(false)
  status                 ProgressStatus           @default(NOT_STARTED)
  secondaryMaterialId    String?
  secondaryMaterialQty   Float?
  additionalCosts        AdditionalCostLineItem[]
  group                  BillingGroup?            @relation(fields: [groupId], references: [id])
  material               Material?                @relation("Job::primaryMaterial", fields: [materialId], references: [id])
  resource               Resource?                @relation(fields: [resourceId], references: [id])
  resourceType           ResourceType?            @relation(fields: [resourceTypeId], references: [id])
  secondaryMaterial      Material?                @relation("Job::secondaryMaterial", fields: [secondaryMaterialId], references: [id])
  shop                   Shop                     @relation(fields: [shopId], references: [id])
  user                   user                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments               JobComment[]
  items                  JobItem[]
  ledgerItems            LedgerItem?
  logs                   logs[]
}

model LedgerItem {
  id         String         @id @default(cuid())
  userId     String
  shopId     String
  jobId      String?        @unique
  type       LedgerItemType
  invoiceUrl String?
  invoiceKey String?
  value      Float
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  job        Job?           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  shop       Shop           @relation(fields: [shopId], references: [id])
  user       user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs       logs[]
}

model JobComment {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobId     String
  userId    String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs      logs[]
}

model AdditionalCostLineItem {
  id                   String        @id @default(cuid())
  resourceTypeId       String?
  resourceId           String?
  materialId           String?
  secondaryMaterialId  String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  unitQty              Float?
  timeQty              Float?
  materialQty          Float?
  secondaryMaterialQty Float?
  processingTimeQty    Float?
  active               Boolean       @default(true)
  jobId                String
  job                  Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  material             Material?     @relation("AdditionalCostLineItem::primaryMaterial", fields: [materialId], references: [id])
  secondaryMaterial    Material?     @relation("AdditionalCostLineItem::secondaryMaterial", fields: [secondaryMaterialId], references: [id])
  resource             Resource?     @relation(fields: [resourceId], references: [id])
  resourceType         ResourceType? @relation(fields: [resourceTypeId], references: [id])
}

model JobItem {
  id                   String         @id @default(cuid())
  title                String
  status               ProgressStatus @default(NOT_STARTED)
  qty                  Float?
  fileKey              String
  fileUrl              String
  fileName             String
  fileType             String
  fileThumbnailKey     String?
  fileThumbnailUrl     String?
  fileThumbnailName    String?
  stlVolume            Float?
  stlBoundingBoxX      Float?
  stlBoundingBoxY      Float?
  stlBoundingBoxZ      Float?
  stlIsWatertight      Boolean?
  resourceId           String?
  resourceTypeId       String?
  materialId           String?
  secondaryMaterialId  String?
  userId               String?
  approved             Boolean?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  active               Boolean        @default(true)
  processingTimeQty    Float?
  timeQty              Float?
  unitQty              Float?
  materialQty          Float?
  secondaryMaterialQty Float?
  jobId                String
  job                  Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  material             Material?      @relation("JobItem::primaryMaterial", fields: [materialId], references: [id])
  secondaryMaterial    Material?      @relation("JobItem::secondaryMaterial", fields: [secondaryMaterialId], references: [id])
  resource             Resource?      @relation(fields: [resourceId], references: [id])
  resourceType         ResourceType?  @relation(fields: [resourceTypeId], references: [id])
  user                 user?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs                 logs[]
}

model BillingGroup {
  id                   String                       @id @default(cuid())
  title                String
  description          String?
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  active               Boolean                      @default(true)
  shopId               String
  membersCanCreateJobs Boolean                      @default(false)
  shop                 Shop                         @relation(fields: [shopId], references: [id])
  invitationLinks      BillingGroupInvitationLink[]
  jobs                 Job[]
  users                UserBillingGroup[]
  logs                 logs[]
}

model BillingGroupInvitationLink {
  id             String       @id @default(cuid())
  active         Boolean      @default(true)
  expires        DateTime?
  billingGroupId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  billingGroup   BillingGroup @relation(fields: [billingGroupId], references: [id])
  logs           logs[]
}

model UserBillingGroup {
  id             String               @id @default(cuid())
  userId         String
  billingGroupId String
  role           UserBillingGroupRole @default(MEMBER)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  active         Boolean              @default(true)
  billingGroup   BillingGroup         @relation(fields: [billingGroupId], references: [id])
  user           user                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs           logs[]
}

enum LogType {
  USER_LOGIN
  USER_CREATED
  SHOP_CREATED
  USER_CONNECTED_TO_SHOP
  USER_DISCONNECTED_FROM_SHOP
  USER_SHOP_ROLE_CHANGED
  USER_PROMOTED_TO_ADMIN
  USER_DEMOTED_FROM_ADMIN
  USER_SUSPENSION_APPLIED
  USER_SUSPENSION_REMOVED
  USER_SUSPENSION_CHANGED
  JOB_CREATED
  JOB_MODIFIED
  JOB_DELETED
  JOB_STATUS_CHANGED
  JOB_ITEM_CREATED
  JOB_ITEM_DELETED
  JOB_ITEM_MODIFIED
  JOB_ITEM_STATUS_CHANGED
  JOB_FINALIZED
  JOB_INVOICE_GENERATED
  RESOURCE_CREATED
  RESOURCE_MODIFIED
  RESOURCE_DELETED
  RESOURCE_IMAGE_CREATED
  RESOURCE_IMAGE_MODIFIED
  RESOURCE_IMAGE_DELETED
  RESOURCE_TYPE_CREATED
  RESOURCE_TYPE_MODIFIED
  RESOURCE_TYPE_DELETED
  MATERIAL_CREATED
  MATERIAL_MODIFIED
  MATERIAL_DELETED
  MATERIAL_MSDS_UPLOADED
  MATERIAL_TDS_UPLOADED
  MATERIAL_IMAGE_CREATED
  MATERIAL_IMAGE_MODIFIED
  MATERIAL_IMAGE_DELETED
  COMMENT_CREATED
  LEDGER_ITEM_CREATED
  LEDGER_ITEM_CREATED_MANUALLY
  BILLING_GROUP_CREATED
  BILLING_GROUP_MODIFIED
  BILLING_GROUP_DELETED
  USER_ADDED_TO_BILLING_GROUP
  USER_REMOVED_FROM_BILLING_GROUP
  USER_BILLING_GROUP_ROLE_CHANGED
  BILLING_GROUP_PROJECT_CREATED
  BILLING_GROUP_PROJECT_MODIFIED
  BILLING_GROUP_PROJECT_DELETED
  BILLING_GROUP_PROJECT_FILE_UPLOADED
  BILLING_GROUP_INVITATION_LINK_CREATED
  BILLING_GROUP_INVITATION_LINK_DELETED
  BILLING_GROUP_INVITATION_LINK_MODIFIED
  JOB_ADDED_TO_BILLING_GROUP
  FORBIDDEN_ACTION
  SHOP_MODIFIED
}

enum AccountType {
  CUSTOMER
  OPERATOR
  ADMIN
  GROUP_ADMIN
}

enum SuppliedMaterialLevels {
  ALWAYS
  SOMETIMES
  NEVER
  SPECIAL
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  TEAL
}

enum LedgerItemType {
  INITIAL
  JOB
  AUTOMATED_TOPUP
  AUTOMATED_DEPOSIT
  MANUAL_TOPUP
  MANUAL_DEPOSIT
  MANUAL_REDUCTION
  FUNDS_PURCHASED
  REFUND
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  WAITING_FOR_PICKUP
  WAITING_FOR_PAYMENT
  CANCELLED
  WONT_DO
  WAITING
}

enum UserBillingGroupRole {
  ADMIN
  MEMBER
}

enum automatedPostLedgerItemType{
  TOPUP
  DEPOSIT
}

model Navigation {
  id     String @id @default(cuid())
  userId String
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

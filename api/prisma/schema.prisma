// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String

  logs     logs[]
  shops    UserShop[]
  jobs     Job[]
  comments JobComment[]
  ledgerItems LedgerItem[]
  billingGroups UserBillingGroup[]

  admin            Boolean @default(false)
  suspended        Boolean @default(false)
  suspensionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model logs {
  id      String  @id @default(cuid())
  type    LogType
  message String?
  from    String? @db.MediumText
  to      String? @db.MediumText

  user   user?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  shop   Shop?   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String?

  job   Job?    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId String?

  jobItem   JobItem? @relation(fields: [jobItemId], references: [id], onDelete: Cascade)
  jobItemId String?

  resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String?

  resourceImage   ResourceImage? @relation(fields: [resourceImageId], references: [id], onDelete: Cascade)
  resourceImageId String?

  material   Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId String?

  materialImage   MaterialImage? @relation(fields: [materialImageId], references: [id], onDelete: Cascade)
  materialImageId String?

  resourceType   ResourceType? @relation(fields: [resourceTypeId], references: [id], onDelete: Cascade)
  resourceTypeId String?

  comment   JobComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  ledgerItem   LedgerItem? @relation(fields: [ledgerItemId], references: [id], onDelete: Cascade)
  ledgerItemId String?

  billingGroup   BillingGroup? @relation(fields: [billingGroupId], references: [id], onDelete: Cascade)
  billingGroupId String?

  userBillingGroup   UserBillingGroup? @relation(fields: [userBillingGroupId], references: [id], onDelete: Cascade)
  userBillingGroupId String?

  billingGroupProject   BillingGroupProject? @relation(fields: [billingGroupProjectId], references: [id], onDelete: Cascade)
  billingGroupProjectId String?

  billingGroupProjectFile   BillingGroupProjectFile? @relation(fields: [billingGroupProjectFileId], references: [id], onDelete: Cascade)
  billingGroupProjectFileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  USER_LOGIN
  USER_CREATED
  SHOP_CREATED
  USER_CONNECTED_TO_SHOP
  USER_DISCONNECTED_FROM_SHOP
  USER_SHOP_ROLE_CHANGED
  USER_PROMOTED_TO_ADMIN
  USER_DEMOTED_FROM_ADMIN
  USER_SUSPENSION_APPLIED
  USER_SUSPENSION_REMOVED
  USER_SUSPENSION_CHANGED
  JOB_CREATED
  JOB_MODIFIED
  JOB_DELETED
  JOB_STATUS_CHANGED
  JOB_ITEM_CREATED
  JOB_ITEM_DELETED
  JOB_ITEM_MODIFIED
  JOB_ITEM_STATUS_CHANGED
  JOB_FINALIZED
  JOB_INVOICE_GENERATED
  RESOURCE_CREATED
  RESOURCE_MODIFIED
  RESOURCE_DELETED
  RESOURCE_IMAGE_CREATED
  RESOURCE_IMAGE_MODIFIED
  RESOURCE_IMAGE_DELETED
  RESOURCE_TYPE_CREATED
  RESOURCE_TYPE_MODIFIED
  RESOURCE_TYPE_DELETED
  MATERIAL_CREATED
  MATERIAL_MODIFIED
  MATERIAL_DELETED
  MATERIAL_MSDS_UPLOADED
  MATERIAL_TDS_UPLOADED
  MATERIAL_IMAGE_CREATED
  MATERIAL_IMAGE_MODIFIED
  MATERIAL_IMAGE_DELETED
  COMMENT_CREATED
  LEDGER_ITEM_CREATED
  LEDGER_ITEM_CREATED_MANUALLY
  BILLING_GROUP_CREATED
  BILLING_GROUP_MODIFIED
  BILLING_GROUP_DELETED
  USER_ADDED_TO_BILLING_GROUP
  USER_REMOVED_FROM_BILLING_GROUP
  USER_BILLING_GROUP_ROLE_CHANGED
  BILLING_GROUP_PROJECT_CREATED
  BILLING_GROUP_PROJECT_MODIFIED
  BILLING_GROUP_PROJECT_DELETED
  BILLING_GROUP_PROJECT_FILE_UPLOADED
}

model UserShop {
  id     String @id @default(cuid())
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String

  accountType  AccountType @default(CUSTOMER)
  accountTitle String?

  active Boolean @default(true)

  blacklisted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccountType {
  CUSTOMER
  OPERATOR
  ADMIN
  INSTRUCTOR
}

model Shop {
  id          String  @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  description String? @db.MediumText
  imageUrl    String?

  logoUrl String?
  logoKey String?
  logoName String?

  color Color?

  logs  logs[]
  users UserShop[]
  jobs  Job[]
  billingGroups BillingGroup[]

  resourceTypes ResourceType[]
  resources     Resource[]
  materials Material[]

  ledgerItems LedgerItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String          @id @default(cuid())
  title       String
  description String?         @db.MediumText
  images      ResourceImage[]
  public      Boolean         @default(false)

  primaryCategory   String?
  secondaryCategory String?

  resourceType   ResourceType @relation(fields: [resourceTypeId], references: [id])
  resourceTypeId String

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  quantity       Int?
  quantityPublic Boolean @default(true)

  costPerUnit           Float?
  fixedCost             Float?
  costPerTime           Float?
  materialLabel         String?
  costPerProcessingTime Float?
  costingPublic         Boolean @default(true)

  userSuppliedMaterial SuppliedMaterialLevels @default(NEVER)

  jobItems JobItem[]
  jobs     Job[]

  logs logs[]

  additionalCostItems AdditionalCostLineItem[]
}

model Material {
  id           String  @id @default(cuid())
  title        String
  description  String? @db.MediumText
  manufacturer String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  jobItems JobItem[]
  jobs     Job[]

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  costPerUnit    Float?
  unitDescriptor String?
  costPublic     Boolean @default(true)

  resourceTypeId String
  resourceType   ResourceType @relation(fields: [resourceTypeId], references: [id])

  images MaterialImage[]

  msdsFileKey  String?
  msdsFileUrl  String?
  msdsFileName String?
  msdsFileType String?

  tdsFileKey  String?
  tdsFileUrl  String?
  tdsFileName String?
  tdsFileType String?

  logs logs[]

  additionalCostItems AdditionalCostLineItem[]
}

model MaterialImage {
  id String @id @default(cuid())

  fileKey  String
  fileUrl  String
  fileName String
  fileType String

  description String?

  active Boolean @default(true)

  material   Material @relation(fields: [materialId], references: [id])
  materialId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      logs[]
}

model ResourceImage {
  id String @id @default(cuid())

  fileKey  String
  fileUrl  String
  fileName String
  fileType String

  description String?

  active Boolean @default(true)

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logs      logs[]
}

model ResourceType {
  id          String  @id @default(cuid())
  title       String
  description String? @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  resources Resource[]
  jobItems  JobItem[]
  jobs      Job[]
  materials Material[]

  logs logs[]

  additionalCostItems AdditionalCostLineItem[]
}

enum SuppliedMaterialLevels {
  ALWAYS
  SOMETIMES
  NEVER
  SPECIAL
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  TEAL
}

model Job {
  id          String  @id @default(cuid())
  title       String
  description String? @db.MediumText
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String

  user   user   @relation(fields: [userId], references: [id])
  userId String

  material   Material? @relation(fields: [materialId], references: [id])
  materialId String?

  resourceType   ResourceType? @relation(fields: [resourceTypeId], references: [id])
  resourceTypeId String?

  resource   Resource? @relation(fields: [resourceId], references: [id])
  resourceId String?

  dueDate DateTime?

  finalized   Boolean     @default(false)
  finalizedAt DateTime?
  ledgerItems LedgerItem[]

  additionalCostOverride Boolean                  @default(false) /// If true, the additional cost will be used _instead_ of the calculated cost. If false, it will be used in addition.
  additionalCosts        AdditionalCostLineItem[]

  logs  logs[]
  items JobItem[]

  comments JobComment[]

  status ProgressStatus @default(NOT_STARTED)
}

model LedgerItem {
  id     String @id @default(cuid())

  userId String
  user   user   @relation(fields: [userId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  jobId  String? @unique
  job    Job?    @relation(fields: [jobId], references: [id])

  type LedgerItemType

  invoiceUrl String?
  invoiceKey String?

  value Float

  logs logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LedgerItemType {
  INITIAL
  JOB
  AUTOMATED_TOPUP
  AUTOMATED_DEPOSIT
  MANUAL_TOPUP
  MANUAL_DEPOSIT
  MANUAL_REDUCTION
  FUNDS_PURCHASED
  REFUND
}

model JobComment {
  id        String   @id @default(cuid())
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   user   @relation(fields: [userId], references: [id])
  userId String

  logs logs[]
}

model AdditionalCostLineItem {
  id String @id @default(cuid())

  resourceTypeId String?
  resourceType   ResourceType? @relation(fields: [resourceTypeId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [id])

  materialId String?
  material   Material? @relation(fields: [materialId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unitQty           Float?
  timeQty           Float?
  materialQty       Float?
  processingTimeQty Float?

  active Boolean @default(true)

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model JobItem {
  id     String         @id @default(cuid())
  title  String
  status ProgressStatus @default(NOT_STARTED)

  fileKey  String
  fileUrl  String
  fileName String
  fileType String

  fileThumbnailKey  String?
  fileThumbnailUrl  String?
  fileThumbnailName String?

  stlVolume Float?
  stlBoundingBoxX Float?
  stlBoundingBoxY Float?
  stlBoundingBoxZ Float?
  stlIsWatertight Boolean?

  resource   Resource? @relation(fields: [resourceId], references: [id])
  resourceId String?

  resourceType   ResourceType? @relation(fields: [resourceTypeId], references: [id])
  resourceTypeId String?

  material   Material? @relation(fields: [materialId], references: [id])
  materialId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  processingTimeQty Float?
  timeQty           Float?
  unitQty           Float?
  materialQty       Float?

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])
  logs  logs[]
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  WAITING_FOR_PICKUP
  WAITING_FOR_PAYMENT
  CANCELLED
  WONT_DO
  WAITING
}

model BillingGroup {
  id          String  @id @default(cuid())
  title       String
  description String? @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  users UserBillingGroup[]
  logs logs[]
  projects BillingGroupProject[]
}

model UserBillingGroup {
  id     String @id @default(cuid())

  userId String
  user   user   @relation(fields: [userId], references: [id])

  billingGroupId String
  billingGroup   BillingGroup @relation(fields: [billingGroupId], references: [id])

  role UserBillingGroupRole @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs logs[]
}

enum UserBillingGroupRole {
  ADMIN
  MEMBER
}

model BillingGroupProject {
  id String @id @default(cuid())

  billingGroupId String
  billingGroup   BillingGroup @relation(fields: [billingGroupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs logs[]
  images BillingGroupProjectFile[]
}

model BillingGroupProjectFile {
  id String @id @default(cuid())

  fileKey  String
  fileUrl  String
  fileName String
  fileType String

  BillingGroupProjectId String
  project   BillingGroupProject @relation(fields: [BillingGroupProjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs logs[]
}
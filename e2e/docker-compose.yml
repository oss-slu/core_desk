services:
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Console
    volumes:
      - miniodata:/data

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: /bin/sh
    command:
      - -c
      - |
        set -euo pipefail
        mc alias set local http://minio:9000 minioadmin minioadmin
        mc mb --ignore-existing local/sluop
        cat >/tmp/cors.json <<'JSON'
        [
          {
            "AllowedOrigins": ["*"],
            "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
            "AllowedHeaders": ["*"],
            "ExposeHeaders": ["ETag"],
            "MaxAgeSeconds": 3000
          }
        ]
        JSON
        mc cors set local/sluop /tmp/cors.json || true
        cat >/tmp/policy.json <<'JSON'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"AWS": ["*"]},
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::sluop",
                "arn:aws:s3:::sluop/*"
              ]
            }
          ]
        }
        JSON
        mc anonymous set-json local/sluop /tmp/policy.json || true
        tail -f /dev/null

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sluop
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data

  api:
    build:
      context: ..
      dockerfile: Dockerfile.e2e
      args:
        # Optional; pass through from your shell if set
        SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN:-}
    env_file:
      - ./env/api.env
    environment:
      # Ensure Prisma can reach DB inside the Docker network
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sluop
      - PORT=3030
      # S3/MinIO configuration for e2e
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_BUCKET=sluop
      - AWS_ENDPOINT=http://minio:9000
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3030/health"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "3030:3030"

  cypress:
    image: cypress/included:13.17.0
    working_dir: /e2e
    depends_on:
      api:
        condition: service_healthy
    environment:
      # Cypress config picks up BASE_URL in e2e/cypress.config.cjs
      - BASE_URL=http://api:3030
      # Also set the Cypress env var form for good measure
      - CYPRESS_baseUrl=http://api:3030
      # Optional: expose API URL for custom commands if they use it
      - CYPRESS_API_URL=http://api:3030
      # Prevent Chrome from sandboxing inside container by default
      - CYPRESS_BROWSER=chrome
      # Allow Prisma tasks to connect directly to Postgres
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sluop
    volumes:
      # Mount entire e2e workspace so package.json and node_modules live here
      - ./:/e2e
      # Mount Prisma schema from API so we can generate Debian engine client
      - ../api/prisma:/api/prisma:ro
    # cypress/included sets an ENTRYPOINT to `cypress`, so override it to run our setup first
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -euo pipefail
        cd /e2e
        echo "[cypress-setup] Installing e2e dependencies (npm ci)..."
        npm ci --no-audit --no-fund --loglevel=error
        echo "[cypress-setup] Preparing schema in local /e2e/prisma..."
        mkdir -p prisma
        cp /api/prisma/schema.prisma prisma/schema.prisma
        echo "[cypress-setup] Generating Prisma client from ./prisma/schema.prisma..."
        npx prisma generate --schema prisma/schema.prisma
        if [ "${WATCH:-}" = "1" ]; then
          echo "[cypress-setup] Watch mode enabled. Starting nodemon to re-run tests on changes..."
          npx nodemon --watch cypress --watch cypress.config.cjs --ext js,ts,jsx,tsx,cjs,mjs,json --exec "cypress run --e2e"
        else
          echo "[cypress-setup] Starting Cypress single run..."
          cypress run --e2e
        fi

volumes:
  dbdata:
    driver: local
  miniodata:
    driver: local
